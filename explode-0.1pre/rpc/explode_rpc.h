/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _EXPLODE_RPC_H_RPCGEN
#define _EXPLODE_RPC_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


struct abstract_path_res {
	int errornum;
	union {
		struct {
			u_int fs_buf_len;
			char *fs_buf_val;
		} fs_buf;
	} abstract_path_res_u;
};
typedef struct abstract_path_res abstract_path_res;

typedef struct {
	u_int buffer_len;
	char *buffer_val;
} buffer;

struct read_res {
	int errornum;
	union {
		buffer buf;
	} read_res_u;
};
typedef struct read_res read_res;

struct stat_res {
	int errornum;
	union {
		char buf[96];
	} stat_res_u;
};
typedef struct stat_res stat_res;

struct rpc_creat_1_argument {
	char *pathname;
	int mode;
};
typedef struct rpc_creat_1_argument rpc_creat_1_argument;

struct rpc_creat_osync_1_argument {
	char *pathname;
	int mode;
};
typedef struct rpc_creat_osync_1_argument rpc_creat_osync_1_argument;

struct rpc_mkdir_1_argument {
	char *pathname;
	int mode;
};
typedef struct rpc_mkdir_1_argument rpc_mkdir_1_argument;

struct rpc_link_1_argument {
	char *oldpath;
	char *newpath;
};
typedef struct rpc_link_1_argument rpc_link_1_argument;

struct rpc_symlink_1_argument {
	char *oldpath;
	char *newpath;
};
typedef struct rpc_symlink_1_argument rpc_symlink_1_argument;

struct rpc_rename_1_argument {
	char *oldpath;
	char *newpath;
};
typedef struct rpc_rename_1_argument rpc_rename_1_argument;

struct rpc_truncate_1_argument {
	char *pathname;
	int length;
};
typedef struct rpc_truncate_1_argument rpc_truncate_1_argument;

struct rpc_open_1_argument {
	char *pathname;
	int flags;
};
typedef struct rpc_open_1_argument rpc_open_1_argument;

struct rpc_read_1_argument {
	int fd;
	int count;
};
typedef struct rpc_read_1_argument rpc_read_1_argument;

struct rpc_write_1_argument {
	int fd;
	buffer buf;
	int count;
};
typedef struct rpc_write_1_argument rpc_write_1_argument;

struct rpc_ftruncate_1_argument {
	int fd;
	int length;
};
typedef struct rpc_ftruncate_1_argument rpc_ftruncate_1_argument;

struct rpc_pwrite_1_argument {
	int fd;
	buffer buf;
	int count;
	int offset;
};
typedef struct rpc_pwrite_1_argument rpc_pwrite_1_argument;

#define EXPLODEPROG 0x20000077
#define EXPLODEVERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define rpc_systemf 1
extern  int * rpc_systemf_1(char *, CLIENT *);
extern  int * rpc_systemf_1_svc(char *, struct svc_req *);
#define rpc_unlink 2
extern  int * rpc_unlink_1(char *, CLIENT *);
extern  int * rpc_unlink_1_svc(char *, struct svc_req *);
#define rpc_rmdir 3
extern  int * rpc_rmdir_1(char *, CLIENT *);
extern  int * rpc_rmdir_1_svc(char *, struct svc_req *);
#define rpc_creat 4
extern  int * rpc_creat_1(char *, int , CLIENT *);
extern  int * rpc_creat_1_svc(char *, int , struct svc_req *);
#define rpc_creat_osync 5
extern  int * rpc_creat_osync_1(char *, int , CLIENT *);
extern  int * rpc_creat_osync_1_svc(char *, int , struct svc_req *);
#define rpc_mkdir 6
extern  int * rpc_mkdir_1(char *, int , CLIENT *);
extern  int * rpc_mkdir_1_svc(char *, int , struct svc_req *);
#define rpc_link 7
extern  int * rpc_link_1(char *, char *, CLIENT *);
extern  int * rpc_link_1_svc(char *, char *, struct svc_req *);
#define rpc_symlink 8
extern  int * rpc_symlink_1(char *, char *, CLIENT *);
extern  int * rpc_symlink_1_svc(char *, char *, struct svc_req *);
#define rpc_rename 9
extern  int * rpc_rename_1(char *, char *, CLIENT *);
extern  int * rpc_rename_1_svc(char *, char *, struct svc_req *);
#define rpc_truncate 10
extern  int * rpc_truncate_1(char *, int , CLIENT *);
extern  int * rpc_truncate_1_svc(char *, int , struct svc_req *);
#define rpc_open 11
extern  int * rpc_open_1(char *, int , CLIENT *);
extern  int * rpc_open_1_svc(char *, int , struct svc_req *);
#define rpc_read 12
extern  read_res * rpc_read_1(int , int , CLIENT *);
extern  read_res * rpc_read_1_svc(int , int , struct svc_req *);
#define rpc_write 13
extern  int * rpc_write_1(int , buffer , int , CLIENT *);
extern  int * rpc_write_1_svc(int , buffer , int , struct svc_req *);
#define rpc_close 14
extern  int * rpc_close_1(int , CLIENT *);
extern  int * rpc_close_1_svc(int , struct svc_req *);
#define rpc_fsync 15
extern  int * rpc_fsync_1(int , CLIENT *);
extern  int * rpc_fsync_1_svc(int , struct svc_req *);
#define rpc_ftruncate 16
extern  int * rpc_ftruncate_1(int , int , CLIENT *);
extern  int * rpc_ftruncate_1_svc(int , int , struct svc_req *);
#define rpc_pwrite 17
extern  int * rpc_pwrite_1(int , buffer , int , int , CLIENT *);
extern  int * rpc_pwrite_1_svc(int , buffer , int , int , struct svc_req *);
#define rpc_sync 18
extern  int * rpc_sync_1(CLIENT *);
extern  int * rpc_sync_1_svc(struct svc_req *);
#define rpc_stat 19
extern  stat_res * rpc_stat_1(char *, CLIENT *);
extern  stat_res * rpc_stat_1_svc(char *, struct svc_req *);
#define rpc_abstract_path 20
extern  abstract_path_res * rpc_abstract_path_1(char *, CLIENT *);
extern  abstract_path_res * rpc_abstract_path_1_svc(char *, struct svc_req *);
extern int explodeprog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define rpc_systemf 1
extern  int * rpc_systemf_1();
extern  int * rpc_systemf_1_svc();
#define rpc_unlink 2
extern  int * rpc_unlink_1();
extern  int * rpc_unlink_1_svc();
#define rpc_rmdir 3
extern  int * rpc_rmdir_1();
extern  int * rpc_rmdir_1_svc();
#define rpc_creat 4
extern  int * rpc_creat_1();
extern  int * rpc_creat_1_svc();
#define rpc_creat_osync 5
extern  int * rpc_creat_osync_1();
extern  int * rpc_creat_osync_1_svc();
#define rpc_mkdir 6
extern  int * rpc_mkdir_1();
extern  int * rpc_mkdir_1_svc();
#define rpc_link 7
extern  int * rpc_link_1();
extern  int * rpc_link_1_svc();
#define rpc_symlink 8
extern  int * rpc_symlink_1();
extern  int * rpc_symlink_1_svc();
#define rpc_rename 9
extern  int * rpc_rename_1();
extern  int * rpc_rename_1_svc();
#define rpc_truncate 10
extern  int * rpc_truncate_1();
extern  int * rpc_truncate_1_svc();
#define rpc_open 11
extern  int * rpc_open_1();
extern  int * rpc_open_1_svc();
#define rpc_read 12
extern  read_res * rpc_read_1();
extern  read_res * rpc_read_1_svc();
#define rpc_write 13
extern  int * rpc_write_1();
extern  int * rpc_write_1_svc();
#define rpc_close 14
extern  int * rpc_close_1();
extern  int * rpc_close_1_svc();
#define rpc_fsync 15
extern  int * rpc_fsync_1();
extern  int * rpc_fsync_1_svc();
#define rpc_ftruncate 16
extern  int * rpc_ftruncate_1();
extern  int * rpc_ftruncate_1_svc();
#define rpc_pwrite 17
extern  int * rpc_pwrite_1();
extern  int * rpc_pwrite_1_svc();
#define rpc_sync 18
extern  int * rpc_sync_1();
extern  int * rpc_sync_1_svc();
#define rpc_stat 19
extern  stat_res * rpc_stat_1();
extern  stat_res * rpc_stat_1_svc();
#define rpc_abstract_path 20
extern  abstract_path_res * rpc_abstract_path_1();
extern  abstract_path_res * rpc_abstract_path_1_svc();
extern int explodeprog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_abstract_path_res (XDR *, abstract_path_res*);
extern  bool_t xdr_buffer (XDR *, buffer*);
extern  bool_t xdr_read_res (XDR *, read_res*);
extern  bool_t xdr_stat_res (XDR *, stat_res*);
extern  bool_t xdr_rpc_creat_1_argument (XDR *, rpc_creat_1_argument*);
extern  bool_t xdr_rpc_creat_osync_1_argument (XDR *, rpc_creat_osync_1_argument*);
extern  bool_t xdr_rpc_mkdir_1_argument (XDR *, rpc_mkdir_1_argument*);
extern  bool_t xdr_rpc_link_1_argument (XDR *, rpc_link_1_argument*);
extern  bool_t xdr_rpc_symlink_1_argument (XDR *, rpc_symlink_1_argument*);
extern  bool_t xdr_rpc_rename_1_argument (XDR *, rpc_rename_1_argument*);
extern  bool_t xdr_rpc_truncate_1_argument (XDR *, rpc_truncate_1_argument*);
extern  bool_t xdr_rpc_open_1_argument (XDR *, rpc_open_1_argument*);
extern  bool_t xdr_rpc_read_1_argument (XDR *, rpc_read_1_argument*);
extern  bool_t xdr_rpc_write_1_argument (XDR *, rpc_write_1_argument*);
extern  bool_t xdr_rpc_ftruncate_1_argument (XDR *, rpc_ftruncate_1_argument*);
extern  bool_t xdr_rpc_pwrite_1_argument (XDR *, rpc_pwrite_1_argument*);

#else /* K&R C */
extern bool_t xdr_abstract_path_res ();
extern bool_t xdr_buffer ();
extern bool_t xdr_read_res ();
extern bool_t xdr_stat_res ();
extern bool_t xdr_rpc_creat_1_argument ();
extern bool_t xdr_rpc_creat_osync_1_argument ();
extern bool_t xdr_rpc_mkdir_1_argument ();
extern bool_t xdr_rpc_link_1_argument ();
extern bool_t xdr_rpc_symlink_1_argument ();
extern bool_t xdr_rpc_rename_1_argument ();
extern bool_t xdr_rpc_truncate_1_argument ();
extern bool_t xdr_rpc_open_1_argument ();
extern bool_t xdr_rpc_read_1_argument ();
extern bool_t xdr_rpc_write_1_argument ();
extern bool_t xdr_rpc_ftruncate_1_argument ();
extern bool_t xdr_rpc_pwrite_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_EXPLODE_RPC_H_RPCGEN */
